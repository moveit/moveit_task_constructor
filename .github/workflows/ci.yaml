# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  default:
    strategy:
      fail-fast: false
      matrix:
        env:
          # TODO: We have to use -Wno-redundant-decls since rosidl_generator_c is generating broken headers
          - IMAGE: humble-source
            CXXFLAGS: >-
             -Werror -Wall -Wextra -Wwrite-strings -Wunreachable-code -Wpointer-arith -Wno-redundant-decls
             -Wno-unused-parameter -Wno-unused-function -Wno-deprecated-copy -Wno-unused-but-set-parameter
          - IMAGE: rolling-source
            NAME: ccov
            TARGET_CMAKE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage"
            CXXFLAGS: >-
             -Werror -Wall -Wextra -Wwrite-strings -Wunreachable-code -Wpointer-arith -Wno-redundant-decls
             -Wno-unused-parameter -Wno-unused-function -Wno-deprecated-copy -Wno-unused-but-set-parameter
          - IMAGE: rolling-source
            CXX: clang++
            CLANG_TIDY: true
            CXXFLAGS: >-
             -Werror -Wall -Wextra -Wwrite-strings -Wunreachable-code -Wpointer-arith -Wno-redundant-decls
             -Wno-unused-parameter -Wno-unused-function -Wno-deprecated-copy
          # Add fast_unwind_on_malloc=0 to fix stacktraces being too short or do not make sense
          # see https://github.com/google/sanitizers/wiki/AddressSanitizer
          - IMAGE: rolling-source
            NAME: asan
            DOCKER_RUN_OPTS: >-
              -e PRELOAD=libasan.so.5
              -e LSAN_OPTIONS="suppressions=$PWD/.github/workflows/lsan.suppressions,fast_unwind_on_malloc=0"
              -e ASAN_OPTIONS="new_delete_type_mismatch=0,alloc_dealloc_mismatch=0"
            TARGET_CMAKE_ARGS: -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O1"

    env:
      CLANG_TIDY_ARGS: --fix --fix-errors --format-style=file
      DOCKER_IMAGE: ghcr.io/ros-planning/moveit2:${{ matrix.env.IMAGE }}
      UNDERLAY: /root/ws_moveit/install
      # TODO: Port to ROS2
      # DOWNSTREAM_WORKSPACE: "github:ubi-agni/mtc_demos#master github:TAMS-Group/mtc_pour#master"
      UPSTREAM_WORKSPACE: .repos
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      BASEDIR: ${{ github.workspace }}/.work
      CACHE_PREFIX: "${{ matrix.env.IMAGE }}${{ contains(matrix.env.TARGET_CMAKE_ARGS, '--coverage') && '-ccov' || '' }}"
      # perform full clang-tidy check only on manual trigger (workflow_dispatch), PRs do check changed files, otherwise nothing
      CLANG_TIDY_BASE_REF: ${{ github.event_name != 'workflow_dispatch' && (github.base_ref || github.ref) || '' }}
      CC: ${{ matrix.env.CLANG_TIDY && 'clang' }}
      CXX: ${{ matrix.env.CLANG_TIDY && 'clang++' }}

    name: "${{ matrix.env.IMAGE }}${{ matrix.env.NAME && ' • ' || ''}}${{ matrix.env.NAME }}${{ matrix.env.CLANG_TIDY && ' • clang-tidy' || '' }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache ccache
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ env.CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ env.CACHE_PREFIX }}-${{ github.sha }}
            ccache-${{ env.CACHE_PREFIX }}

      - id: ici
        name: Run industrial_ci
        uses: ros-industrial/industrial_ci@master
        env: ${{ matrix.env }}

      - name: Upload test artifacts (on failure)
        uses: actions/upload-artifact@v2
        if: failure() && (steps.ici.outputs.run_target_test || steps.ici.outputs.target_test_results)
        with:
          name: test-results-${{ matrix.env.IMAGE }}
          path: ${{ env.BASEDIR }}/target_ws/**/test_results/**/*.xml
      - name: Generate codecov report
        uses: rhaschke/lcov-action@main
        if: contains(matrix.env.TARGET_CMAKE_ARGS, '--coverage') && steps.ici.outputs.target_test_results == '0'
        with:
          docker: $DOCKER_IMAGE
          workdir: ${{ env.BASEDIR }}/target_ws
          ignore: '"*/target_ws/build/*" "*/target_ws/install/*" "*/test/*"'
      - name: Upload codecov report
        uses: codecov/codecov-action@v2
        if: contains(matrix.env.TARGET_CMAKE_ARGS, '--coverage') && steps.ici.outputs.target_test_results == '0'
        with:
          files: ${{ env.BASEDIR }}/target_ws/coverage.info
